openapi: "3.0.0"
info:
  version: 1.0.0
  title: RSS Scraper API
  description: Sendcloud test - RSS Scraper API writtent in python with Django
  contact:
    name: Rashad Saab
    email: r.saab94@gmail.com
    url: http://localhost.com:/8000
paths:
    /feed/{feed_id}:
      get:
        summary: GET a feed by UID
        description: This URL is used to fetch a feed by is UID.
        parameters:
          - name: feed_id
            in: path
            schema:
             type: integer
             format: int32
            description: The UID of the feed to fetch
            required: true
        tags:
          - Feed
        responses:
          '200':
            description: A feed object
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Feed"
          default:
            description: unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      patch:
        summary: Patch a feed by UID
        description: This endpoint allows the update of a feed's follow status
        parameters:
          - name: feed_id
            in: path
            schema:
             type: integer
             format: int32
            description: The UID of the feed to fetch
            required: true
          - name: follow
            in: query
            schema:
             type: boolean
            description: Describes whether a user wantes to follow the feed or not (true/false)
            required: false
          - name: force_update
            in: query
            schema:
             type: boolean
            description: If set to true, will force an async update on the feed, default is false (true/false)
            required: false
        tags:
          - Feed
        responses:
          '200':
            description: a feed object
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Feed"
          
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      delete:
        summary: Endpoint for deleting a feed
        description: This endpoint is used to delete a single feed by its UID. 
        parameters:
          - name: feed_id
            in: path
            description: The UID of the feed to delete
            required: true
            schema:
             type: integer
             format: int32
        tags:
          - Feed
        responses:
          '200':
            description: success
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
    
    /feed:
      get:
        summary: GET feeds from the API
        description: This endpoint is used to fetch all feed from the API, filtered by the authenticated user id. 
        parameters:
          - name: following
            in: query
            schema:
             type: boolean
            description: filter feeds based on whether the user follows them or not
            required: false
        tags:
          - Feed
        responses:
          '200':
            description: success
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Feed'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      post:
        summary: An endpoint for posting feeds to the API
        description: Create a new feed item. The feed is not updated until the next async update job is run or a separate force update is called
        tags:
          - Feed
        responses:
          201:
            description: The feed object
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Feed'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'


    /entry/{entry_id}:
      get:
        summary: GET an entry by UID
        description: This URL is used to fetch an entry by is UID.
        parameters:
          - name: entry_id
            in: path
            schema:
             type: integer
             format: int32
            description: The UID of the entry to fetch
            required: true
        tags:
          - Entry
        responses:
          '200':
            description: An entry object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Entry'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      patch:
        summary: Patch an entry by UID
        description: patch an entry with read/unread
        parameters:
          - name: entry_id
            in: path
            schema:
             type: integer
             format: int32
            description: The UID of the entry to fetch
            required: true
          - name: read
            in: query
            schema:
             type: boolean
            description: the desired read status of the entry (true/false)
            required: false
        tags:
          - Entry
        responses:
          '200':
            description: An entry object
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Entry'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /entry:
      get:
        summary: GET entries from the API
        description: This endpoint is used to fetch all entries from the API, filtered by the authenticated user id. Entries are sorted by last updated date from feed date.
        parameters:
          - name: feed_id
            in: query
            schema:
             type: integer
             format: int32
            description: filter based on feed id
            required: false
          - name: read
            in: query
            schema:
             type: boolean
            description: filter based on read status
            required: false
        tags:
          - Entry
        responses:
          '200':
            description: An array of entry objects
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Entry'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /notification/{notification_id}:
      get:
        summary: GET a notification by UID
        description: This URL is used to fetch a notification by is UID.
        parameters:
          - name: notification_id
            in: path
            schema:
             type: integer
             format: int32
            description: The UID of the notification to fetch
            required: true
        tags:
          - Notification
        responses:
          '200':
            description: A notification object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Notification'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
      patch:
        summary: Patch an entry by UID
        description: patch an notification with read/unread
        parameters:
          - name: notification_id
            in: path
            schema:
             type: integer
             format: int32
            description: The UID of the notification to fetch
            required: true
          - name: read
            in: query
            schema:
             type: boolean
            description: the desired read status of the notification (true/false)
            required: false
        tags:
          - Notification
        responses:
          '200':
            description: A notification object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Notification'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /notification:
      get:
        summary: GET notifications from the API
        description: This endpoint is used to fetch all notifications from the API, filtered by the authenticated user id. 
        parameters:
          - name: read
            in: query
            schema:
             type: boolean
            description: filter based on read status
            required: false
        tags:
          - Notification
        responses:
          '200':
            description: An array of notification objects
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Notification'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /user/{user_id}:
      get:
        summary: GET a user by UID
        description: This URL is used to fetch a user by its UID.
        parameters:
          - name: user_id
            in: path
            schema:
             type: integer
             format: int32
            description: The UID of the user to fetch
            required: true
        tags:
          - User
        responses:
          '200':
            description: A user object
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

    /user:
      get:
        summary: GET users from the API
        description: This endpoint is used to fetch all users from the API, restricted to admin users only 
        tags:
          - User
        responses:
          '200':
            description: An array of user objects
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          default:
            description: Unexpected error
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'

     
components:
  schemas:
    Feed:
      type: object
      required: ["nickname", "link"]
      properties:
        feed_id:
          type: string
          description: Unique identifier representing a specific feed.
        title:
          type: string
          description: Feed title (automatically updated).
        link:
          type: string
          description: feed url.
        subtitle:
          type: string
          description: feed subtitle.
        description:
          type: string
          description: feed description 
        language:
          type: string
          description: feed language 
        copyright:
          type: string
          description: feed copyright 
        ttl:
          type: string
          description: feed ttl 
        atomLogo:
          type: string
          description: feed logo url 
        pubdate:
          type: string
          description: feed publication date 
        nickname:
          type: string
          description: feed nickname 
        created_at:
          type: string
          description: feed registration date
        updated_at:
          type: string
          description: feed update date. This is not neccessarily a feed fetch, it might be updated by a user
        following:
          type: boolean
          description: whether the feed is followed by the user or not 
        flagged:
          type: boolean
          description: A feed is flagged with true after failing to update for the max number of tries allowed. flagged feeds will stop automatically updating but can be forced to update, thus resting its flagged status to false on success.
       
    Entry:
      type: object
      properties:
        enrt_id:
          type: integer
          format: int32
          description: entry id
        feed:
          type: integer
          format: int32
          description: entry parent feed id     
        state:
          type: string
          description: entry state (0=UNREAD, 1=READ)
        title:
          type: string
          description: entry title 
        author:
          type: string
          description: entry author 
        comments_url:
          type: string
          description: entry comments url.
        guid:
          type: string
          description: entry guid 
        created_at:
          type: string
          description: entry creation date 
        updated_at:
          type: string
          description: entry update date
  
    Notification:
      type: object
      properties:
        notification_id:
          type: integer
          format: int32
          description: notification id
        owner:
          type: integer
          format: int32
          description: notification user id
        feed:
          type: string
          description: notification feed id
        state:
          type: string
          description: notification state state (0=UNREAD, 1=READ)
        title:
          type: string
          description: notification title
        message:
          type: string
          description: notification message
        is_error:
          type: boolean
          description: notification is_error
        created_at:
          type: string
          description: notification created_at
        updated_at:
          type: string
          description: notification updated_at
        last_updated:
          type: string
          description: timestamp of the last time the entry was updated from the RSS feed
  
    User:
      type: object
      properties:
        user_id:
          type: integer
          format: int32
          description: notification user id
        feeds:
          type: array
          items:
            type: integer
            format: int32
          description: user registered feed ids
        username:
          type: string
          description: user's username
          
    Error:
      type: string